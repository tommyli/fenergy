// Tommy Li (tommy.li@firefire.co), 2017-01-16

import co.firefire.n12m.db.RunSqlScriptTask

buildscript {
  repositories {
    mavenLocal()
    jcenter()
    mavenCentral()
    maven {
      url "https://plugins.gradle.org/m2/"
    }
  }
  dependencies {
    classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:+"
    classpath("org.springframework.boot:spring-boot-gradle-plugin:$springBootVersion")
  }
}

plugins {
  id 'org.springframework.boot' version '1.5.7.RELEASE'
}
apply plugin: 'kotlin'
apply plugin: 'groovy'

description = "Fenergy NEM12 module"
group "co.firefire.fenergy.nem12"

ext {
  spockVersion = '1.1-groovy-2.4'
}

repositories {
  mavenLocal()
  jcenter()
  mavenCentral()
}

dependencies {
  compile("org.springframework.boot:spring-boot-autoconfigure:$springBootVersion")
  compile("org.springframework.boot:spring-boot-starter-actuator:$springBootVersion")
  compile("org.springframework.boot:spring-boot-starter-cache:$springBootVersion")
  compile("org.springframework.boot:spring-boot-starter-data-jpa:$springBootVersion")
  compile("org.springframework.boot:spring-boot-starter-data-rest:$springBootVersion")
  compile("org.springframework.boot:spring-boot-starter-logging:$springBootVersion")
  compile("org.springframework.boot:spring-boot-starter-groovy-templates:$springBootVersion")
  compile("org.springframework.boot:spring-boot-starter-mail:$springBootVersion")
  compile("org.springframework.boot:spring-boot-starter-security:$springBootVersion")
  compile("org.springframework.boot:spring-boot-starter-tomcat:$springBootVersion")
  compile("org.springframework.boot:spring-boot-starter-web:$springBootVersion")
  compile("org.springframework.cloud:spring-cloud-starter-zuul:$springCloudZuulVersion")
  compile("org.springframework.security.oauth:spring-security-oauth2:$springSecurityOAuth2Version")

  compile("org.jetbrains.kotlin:kotlin-stdlib:+")
  compile("org.hibernate:hibernate-entitymanager:+")
  compile("org.hibernate:hibernate-java8:+")

//  runtime("org.flywaydb:flyway-core:$flywayVersion")
//  runtime("org.postgresql:postgresql:+")

  testCompile("org.codehaus.groovy:groovy:+")
  testCompile("org.springframework.boot:spring-boot-test:$springBootVersion")
  testCompile("org.springframework:spring-test:$springTestVersion")
  testCompile("org.spockframework:spock-core:$spockVersion")
  testCompile("org.spockframework:spock-spring:$spockVersion")
}

def sysProps = [
  'logging.file'    : project.property('n12m.logging.file'),
  'logging.path'    : project.property('n12m.logging.path'),
  'nem12.db.driver'  : project.property('n12m.db.driver'),
  'nem12.db.schema'  : project.property('n12m.db.schema'),
  'nem12.db.url'     : project.property('n12m.db.url'),
  'nem12.db.userid'  : project.property('n12m.db.userid'),
  'nem12.db.password': project.property('n12m.db.password')
]

bootRun {
  jvmArgs = ['-Dspring.output.ansi.enabled=always']
  systemProperties = sysProps
}

[bootRun, test].each { task ->
  configure(task) {
    systemProperties = sysProps
  }
}

test {
  testLogging {
    events 'passed', 'skipped', 'failed', 'standardError'
    minGranularity 2
    maxGranularity 2
  }
}
