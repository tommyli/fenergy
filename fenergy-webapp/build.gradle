plugins {
  id 'org.springframework.boot'
}
apply plugin: 'io.spring.dependency-management'
dependencyManagement {
  imports {
    mavenBom org.springframework.boot.gradle.plugin.SpringBootPlugin.BOM_COORDINATES
  }
}

apply plugin: 'com.gorylenko.gradle-git-properties'
apply plugin: 'kotlin'
apply plugin: 'kotlin-spring'
//apply plugin: 'com.google.cloud.tools.appengine'

description = "Fenergy Web Application Server"

springBoot {
  buildInfo()
}

bootJar {
  launchScript()
}

//appengine {
//  deploy {
//    stopPreviousVersion = true
//    promote = true
//  }
//}

dependencies {
  implementation("org.springframework.boot:spring-boot-devtools")
  implementation("org.springframework.boot:spring-boot-starter-actuator")
  implementation("org.springframework.boot:spring-boot-starter-data-rest")
  implementation("org.springframework.boot:spring-boot-starter-logging")
  implementation("org.springframework.boot:spring-boot-starter-security")
  implementation("org.springframework.boot:spring-boot-starter-web")
  implementation("org.springframework.security:spring-security-core")
  implementation("org.springframework.security:spring-security-config")
  implementation("org.springframework.security:spring-security-oauth2-core")
  implementation("org.springframework.security:spring-security-oauth2-jose")
  implementation("org.springframework.security:spring-security-openid")
  implementation("org.springframework.security:spring-security-web")
  implementation("org.springframework.security:spring-security-oauth2-client")
  implementation("org.springframework.security:spring-security-oauth2-resource-server")
  implementation "org.springframework.security.oauth.boot:spring-security-oauth2-autoconfigure:$springBootVersion"
  implementation("org.jetbrains.kotlin:kotlin-stdlib")

  implementation project(":fenergy-service")

  testImplementation("org.springframework.boot:spring-boot-starter-test")
  testImplementation("org.springframework.boot:spring-boot-test-autoconfigure")
  testImplementation("org.spockframework:spock-spring:$spockVersion") {
    exclude module: 'groovy-all'
  }
}

task copyClientResources(dependsOn: ':fenergy-ui:assemble') {
  group = 'build'
  description = 'Copy client resources into server webapp build'
  doLast {
    copy {
      from "${project(':fenergy-ui').projectDir}/build"
      into "${project(':fenergy-webapp').projectDir}/src/main/resources/public"
    }
  }
}

assemble.mustRunAfter 'copyClientResources'
bootJar.dependsOn('copyClientResources')
bootJar.mustRunAfter('copyClientResources')

def sysProps = [
  'spring.profiles.active': project.property('fenergy.spring.profiles.active'),
]

[bootRun, test].each { task ->
  configure(task) {
    systemProperties = sysProps
  }
}

test.dependsOn ':fenergy-ui:test'
test.dependsOn(':fenergy-db:flywayClean')
test.mustRunAfter(':fenergy-db:flywayClean')
