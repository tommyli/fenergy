buildscript {
  repositories {
    mavenLocal()
    jcenter()
    mavenCentral()
    maven {
      url "https://plugins.gradle.org/m2/"
    }
  }
  dependencies {
    classpath("org.springframework.boot:spring-boot-gradle-plugin:$springBootVersion")
    classpath("com.google.cloud.tools:appengine-gradle-plugin:+")
    classpath("com.moowork.gradle:gradle-node-plugin:+")
  }
}

plugins {
  id 'org.springframework.boot' version '1.5.7.RELEASE'
}
apply plugin:'java'
apply plugin: 'com.google.cloud.tools.appengine'
apply plugin: 'com.moowork.node'

description = "Fenergy Web Application Server"
group "co.firefire.fenergy"

repositories {
  mavenLocal()
  jcenter()
  mavenCentral()
}

dependencies {
  compile("org.springframework.boot:spring-boot-autoconfigure:$springBootVersion")
  compile("org.springframework.boot:spring-boot-starter-actuator:$springBootVersion")
  compile("org.springframework.boot:spring-boot-starter-cache:$springBootVersion")
  compile("org.springframework.boot:spring-boot-starter-logging:$springBootVersion")
  compile("org.springframework.boot:spring-boot-starter-mail:$springBootVersion")
  compile("org.springframework.boot:spring-boot-starter-security:$springBootVersion")
  compile("org.springframework.boot:spring-boot-starter-tomcat:$springBootVersion")
  compile("org.springframework.boot:spring-boot-starter-web:$springBootVersion")
  compile("org.springframework.security.oauth:spring-security-oauth2:$springSecurityOAuth2Version")

  testCompile("org.springframework.boot:spring-boot-test:$springBootVersion")
  testCompile("org.springframework:spring-test:$springTestVersion")
  testCompile("org.spockframework:spock-core:$spockVersion")
  testCompile("org.spockframework:spock-spring:$spockVersion")
}

def sysProps = [
  'logging.file': project.property('fenergy.logging.file'),
  'logging.path': project.property('fenergy.logging.path'),
]

bootRun {
  jvmArgs = ['-Dspring.output.ansi.enabled=always']
  systemProperties = sysProps
}

[bootRun, test].each { task ->
  configure(task) {
    systemProperties = sysProps
  }
}

appengine {
  deploy {
    stopPreviousVersion = true
    promote = true
  }
}

test {
  testLogging {
    events 'passed', 'skipped', 'failed', 'standardError'
    minGranularity 2
    maxGranularity 2
  }
}

node {
  version = "6.9.1"
  npmVersion = "5.3.0"
  download = false
  nodeModulesDir = file("${project(':fenergy-ui').projectDir}")
}

task clientStart(type: NpmTask, dependsOn: 'npmInstall') {
  group = 'Angular CLI Client Tasks'
  description = 'Build client for development'
  args = ['run', 'start']
}

task clientBuild(type: NpmTask, dependsOn: 'npmInstall') {
  group = 'Angular CLI Client Tasks'
  description = 'Build client for development'
  args = ['run', 'build']
}

task clientTest(type: NpmTask, dependsOn: 'npmInstall') {
  group = 'Angular CLI Client Tasks'
  description = "Run client tests"
  args = ['run', 'test']
}

task clientBuildProd(type: NpmTask, dependsOn: 'npmInstall') {
  group = 'Angular CLI Client Tasks'
  description = 'Build client for production'
  args = ['run', 'buildProd']
}

bootRun.dependsOn(clientBuild)
//jar.dependsOn(clientBuildProd)
