//plugins {
//  id 'org.jetbrains.kotlin.jvm' version '1.3.10'
//}
apply plugin: 'com.gorylenko.gradle-git-properties'
apply plugin: 'io.spring.dependency-management'
apply plugin: 'kotlin'
apply plugin: 'kotlin-spring'
apply plugin: 'org.springframework.boot'
//apply plugin: 'com.google.cloud.tools.appengine'

description = "Fenergy Web Application Server"

springBoot {
  buildInfo()
}

bootJar {
  launchScript()
}

//appengine {
//  deploy {
//    stopPreviousVersion = true
//    promote = true
//  }
//}

dependencies {
  implementation("org.hibernate:hibernate-ehcache")
  implementation("org.springframework.boot:spring-boot-devtools:$springBootVersion")
  implementation("org.springframework.boot:spring-boot-starter-actuator:$springBootVersion")
  implementation("org.springframework.boot:spring-boot-starter-cache:$springBootVersion")
  implementation("org.springframework.boot:spring-boot-starter-data-jpa:$springBootVersion")
  implementation("org.springframework.boot:spring-boot-starter-data-rest:$springBootVersion")
  implementation("org.springframework.boot:spring-boot-starter-logging:$springBootVersion")
  implementation("org.springframework.boot:spring-boot-starter-security:$springBootVersion")
  implementation("org.springframework.boot:spring-boot-starter-web:$springBootVersion")
  implementation("org.springframework.security:spring-security-core")
  implementation("org.springframework.security:spring-security-config")
  implementation("org.springframework.security:spring-security-oauth2-core")
  implementation("org.springframework.security:spring-security-oauth2-jose")
  implementation("org.springframework.security:spring-security-openid")
  implementation("org.springframework.security:spring-security-web")
  implementation("org.springframework.security:spring-security-oauth2-client")
  implementation("org.springframework.security:spring-security-oauth2-resource-server")
  implementation "org.springframework.security.oauth.boot:spring-security-oauth2-autoconfigure:$springBootVersion"
  implementation("org.jetbrains.kotlin:kotlin-stdlib")

  runtime project(":fenergy-db")
  runtime("org.flywaydb:flyway-core:$flywayVersion")
  implementation project(":fenergy-service")

  testImplementation("org.springframework.boot:spring-boot-starter-test:$springBootVersion")
  testImplementation("org.springframework.boot:spring-boot-test-autoconfigure:$springBootVersion")
  testImplementation("org.spockframework:spock-spring:$spockVersion") {
    exclude module: 'groovy-all'
  }
  testRuntime "com.h2database:h2:$h2Version"
}

task copyClientResources(dependsOn: ':fenergy-ui:assemble') {
  group = 'build'
  description = 'Copy client resources into server webapp build'
  doLast {
    copy {
      from "${project(':fenergy-ui').projectDir}/build"
      into "${project(':fenergy-webapp').projectDir}/src/main/resources/public"
    }
  }
}

assemble.mustRunAfter 'copyClientResources'

task assembleWebappAndClient(dependsOn: ['copyClientResources', 'assemble']) {
  group = 'build'
  description = 'Build combined client bundles and server webapp'

  doLast {
    copy {
      from fileTree(dir: "${project(':fenergy-webapp').buildDir}/libs/")
      into "$rootDir/build/"
    }

    logger.quiet "JAR generated at $rootDir/build/. It combines the server and client projects."
  }
}

build.dependsOn 'assembleWebappAndClient'
test.dependsOn ':fenergy-ui:test'

def sysProps = [
  'spring.profiles.active': project.property('fenergy.spring.profiles.active'),
]

[bootRun, test].each { task ->
  configure(task) {
    systemProperties = sysProps
  }
}
repositories {
  mavenCentral()
}
